{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/Filters/CenturiesFilter.tsx","components/Filters/FilterBySex.tsx","components/Filters/SearchFilter.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","providers/AppProvider.tsx","components/PersonLink.tsx","utils/SortBy.ts","utils/Filters.ts","components/Sort.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/HomePage.tsx","components/NotFoundPage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","AGES","CenturiesFilter","getCenturiesParams","century","currentCenturies","getAll","includes","filter","v","String","className","map","cn","find","centuries","get","sex","query","sortBy","sortOrder","FilterBySex","SearchFilter","setSearchParams","type","placeholder","onChange","e","nextParams","target","PeopleFilters","Loader","PeopleContext","createContext","undefined","AppProvider","useState","people","setPeople","Provider","usePeopleContext","context","useContext","Error","PersonLink","personLink","slug","useParams","names","person","name","slugMother","motherName","slugFather","fatherName","born","died","getSortBy","copyPeople","sortASC","sort","a","b","localeCompare","Number","getPeopleFiltered","filterBySex","filterSex","filterQuery","filterCenturies","filtered","toLowerCase","length","Math","ceil","Sort","currentSortBy","nextSortOrder","getSearchParams","PeopleTable","useMemo","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","error","setError","isLoading","setIsLoading","useEffect","loadPeople","data","catch","finally","HomePage","NotFoundPage","Navbar","role","isActive","path","element","replace","App","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.748fd9d3.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from '../SearchLink';\n\nexport const AGES = [16, 17, 18, 19, 20];\n\nexport const CenturiesFilter = () => {\n  const [searchParams] = useSearchParams();\n\n  const getCenturiesParams = (century: string) => {\n    const currentCenturies = searchParams.getAll('centuries');\n\n    return currentCenturies.includes(century)\n      ? currentCenturies.filter(v => v !== century)\n      : [String(century), ...searchParams.getAll('centuries')];\n  };\n\n  return (\n    <>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {AGES.map(century => {\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={cn('button mr-1', {\n                    'is-info': searchParams.getAll('centuries')\n                      .find(v => v.includes(String(century))),\n                  })}\n                  params={{ centuries: getCenturiesParams(String(century)) }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': searchParams.get('centuries') !== null,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n            sortBy: null,\n            sortOrder: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../SearchLink';\n\nexport const FilterBySex = () => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n      <SearchLink\n        className={cn({\n          'is-active': !searchParams.get('sex'),\n        })}\n        params={{ sex: null }}\n      >\n        All\n      </SearchLink>\n      <SearchLink\n        className={cn({\n          'is-active': searchParams.get('sex') === 'm',\n        })}\n        params={{ sex: 'm' }}\n      >\n        Male\n      </SearchLink>\n      <SearchLink\n        className={cn({\n          'is-active': searchParams.get('sex') === 'f',\n        })}\n        params={{ sex: 'f' }}\n      >\n        Female\n      </SearchLink>\n    </p>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const SearchFilter = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  return (\n    <div className=\"panel-block\">\n      <p className=\"control has-icons-left\">\n        <input\n          data-cy=\"NameFilter\"\n          type=\"search\"\n          className=\"input\"\n          placeholder=\"Search\"\n          value={searchParams.get('query') || ''}\n          onChange={(e) => {\n            const nextParams = getSearchWith(searchParams,\n              { query: e.target.value || null });\n\n            setSearchParams(\n              new URLSearchParams(nextParams),\n            );\n          }}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-search\" aria-hidden=\"true\" />\n        </span>\n      </p>\n    </div>\n  );\n};\n","import { CenturiesFilter } from './Filters/CenturiesFilter';\nimport { FilterBySex } from './Filters/FilterBySex';\nimport { SearchFilter } from './Filters/SearchFilter';\n\nexport const PeopleFilters = () => {\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <FilterBySex />\n      <SearchFilter />\n\n      <CenturiesFilter />\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  PropsWithChildren, useContext, useState, createContext,\n} from 'react';\nimport { Person } from '../types';\n\ntype Props = PropsWithChildren<{}>;\n\ntype PeopleContextType = {\n  people: Person[];\n  setPeople: React.Dispatch<React.SetStateAction<Person[]>>\n};\n\nconst PeopleContext = createContext<PeopleContextType | undefined>(undefined);\n\nexport const AppProvider = ({ children }: Props) => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  return (\n    <PeopleContext.Provider value={{\n      people,\n      setPeople,\n    }}\n    >\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n\nexport const usePeopleContext = (): PeopleContextType => {\n  const context = useContext(PeopleContext);\n\n  if (!context) {\n    throw new Error('useTodo must be used within a TodoProvider');\n  }\n\n  return context;\n};\n","import { NavLink, useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  personLink: Person;\n  people: Person[];\n};\n\nexport const PersonLink = ({ personLink, people }: Props) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const names = people.map(person => person.name);\n\n  const slugMother = people\n    .find(person => personLink.motherName?.includes(person.name))?.slug;\n  const slugFather = people\n    .find(person => personLink.fatherName?.includes(person.name))?.slug;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': slug === personLink.slug,\n      })}\n    >\n      <td>\n        <NavLink\n          to={`/people/${personLink.slug}?${searchParams.toString()}`}\n          className={cn({\n            'has-text-danger': personLink.sex === 'f',\n          })}\n        >\n          {personLink.name}\n        </NavLink>\n\n      </td>\n\n      <td>{personLink.sex}</td>\n      <td>{personLink.born}</td>\n      <td>{personLink.died}</td>\n      <td>\n        {names.find(name => personLink.motherName?.includes(name))\n          ? (\n            <NavLink\n              to={`/people/${slugMother}`}\n              className=\"has-text-danger\"\n            >\n              {personLink.motherName}\n            </NavLink>\n          ) : (\n            personLink.motherName || '-'\n          )}\n\n      </td>\n      <td>\n        {names.find(name => personLink.fatherName?.includes(name))\n          ? (\n            <NavLink\n              to={`/people/${slugFather}`}\n            >\n              {personLink.fatherName}\n            </NavLink>\n          ) : (\n            personLink.fatherName || '-'\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { Person, SortBy, SortOrder } from '../types';\n\nexport const getSortBy = (\n  people: Person[],\n  sortBy: SortBy,\n  sortOrder: SortOrder,\n): Person[] => {\n  const copyPeople = [...people];\n  const sortASC = sortOrder === 'ASC' ? 1 : -1;\n\n  if (!sortBy) {\n    return people;\n  }\n\n  const person = (a: Person, b: Person): number => {\n    switch (sortBy) {\n      case 'name':\n        return a.name.localeCompare(b.name);\n\n      case 'sex':\n        return a.sex.localeCompare(b.sex);\n\n      case 'born':\n        return Number(a.born) - Number(b.born);\n\n      case 'died':\n        return Number(a.died) - Number(b.died);\n      default:\n        return 0;\n    }\n  };\n\n  return copyPeople.sort((a, b) => sortASC * person(a, b));\n};\n","import { Person, SortBy, SortOrder } from '../types';\nimport { getSortBy } from './SortBy';\n\nexport const getPeopleFiltered = (\n  people: Person[],\n  filterBySex: string | null,\n  search: string | null,\n  centuries: string[],\n  sortBy: SortBy,\n  sortOrder: SortOrder,\n) => {\n  let filtered = people;\n  let filterSex;\n  let filterQuery;\n  let filterCenturies;\n\n  if (filterBySex) {\n    filterSex = filtered.filter(person => person.sex === filterBySex);\n    filtered = filterSex;\n  }\n\n  if (search) {\n    filterQuery = filtered\n      .filter(person => person.name.toLowerCase()\n        .includes(search.toLowerCase() || ''));\n    filtered = filterQuery;\n  }\n\n  if (centuries.length > 0) {\n    filterCenturies = filtered.filter(person => {\n      return centuries\n        .find(century => century\n          .includes(String(Math.ceil(person.born / 100))));\n    });\n    filtered = filterCenturies;\n  }\n\n  return getSortBy(filtered, sortBy, sortOrder);\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { SortBy } from '../types';\n\ntype Props = {\n  sortBy: SortBy;\n};\n\nexport const Sort = ({ sortBy }: Props) => {\n  const [searchParams] = useSearchParams();\n\n  const getSearchParams = () => {\n    const sortOrder = searchParams.get('sortOrder');\n    const currentSortBy = searchParams.get('sortBy');\n\n    let nextSortOrder = null;\n\n    if (!sortBy || !sortOrder || currentSortBy !== sortBy) {\n      nextSortOrder = 'ASC';\n    } else if (sortOrder === 'ASC') {\n      nextSortOrder = 'DESC';\n    }\n\n    return { sortBy: nextSortOrder ? sortBy : null, sortOrder: nextSortOrder };\n  };\n\n  return (\n    <SearchLink params={getSearchParams()}>\n      <span className=\"icon\">\n        <i className=\"fas fa-sort\" />\n      </span>\n    </SearchLink>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useMemo } from 'react';\nimport { usePeopleContext } from '../providers/AppProvider';\nimport { PersonLink } from './PersonLink';\nimport { getPeopleFiltered } from '../utils/Filters';\nimport { Sort } from './Sort';\n\nexport const PeopleTable = () => {\n  const { people } = usePeopleContext();\n  const [searchParams] = useSearchParams();\n\n  const filter = useMemo(() => {\n    return getPeopleFiltered(\n      people,\n      searchParams.get('sex'),\n      searchParams.get('query'),\n      searchParams.getAll('centuries'),\n      searchParams.get('sortBy'),\n      searchParams.get('sortOrder'),\n    );\n  }, [\n    searchParams.get('sex'),\n    searchParams.get('query'),\n    searchParams.get('centuries'),\n    searchParams.get('sortBy'),\n    searchParams.get('sortOrder'),\n  ]);\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <Sort sortBy=\"name\" />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <Sort sortBy=\"sex\" />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <Sort sortBy=\"born\" />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <Sort sortBy=\"died\" />\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filter.map(person => (\n          <PersonLink\n            key={person.slug}\n            personLink={person}\n            people={people}\n          />\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { usePeopleContext } from '../providers/AppProvider';\nimport { getPeopleFiltered } from '../utils/Filters';\n\nexport const PeoplePage = () => {\n  const { people, setPeople } = usePeopleContext();\n  const [error, setError] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const loadPeople = async () => {\n      const data = await getPeople();\n\n      setPeople(data);\n    };\n\n    setIsLoading(true);\n    loadPeople()\n      .catch(() => setError('Something went wrong'))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {error\n                && <p data-cy=\"peopleLoadingError\">Something went wrong</p>}\n              {people.length === 0 && !isLoading\n                && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n              {getPeopleFiltered(people,\n                searchParams.get('sex'),\n                searchParams.get('query'),\n                searchParams.getAll('centuries'),\n                searchParams.get('sortBy'),\n                searchParams.get('sortOrder')).length === 0\n                && (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )}\n\n              {people.length > 0 && <PeopleTable />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const HomePage = () => {\n  return <h1 className=\"title\">Home Page</h1>;\n};\n","export const NotFoundPage = () => {\n  return <h1 className=\"title\">Page not found</h1>;\n};\n","import {\n  NavLink, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport cn from 'classnames';\nimport { PeoplePage } from './PeoplePage';\nimport { HomePage } from './HomePage';\nimport { NotFoundPage } from './NotFoundPage';\n\nexport const Navbar = () => {\n  return (\n    <>\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              to=\"/\"\n              className={({ isActive }) => cn('navbar-item', {\n                'has-background-grey-lighter': isActive,\n              })}\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              to=\"/people\"\n              className={({ isActive }) => cn('navbar-item', {\n                'has-background-grey-lighter': isActive,\n              })}\n            >\n              People\n            </NavLink>\n            {/* <a className=\"navbar-item\" href=\"#/\">Home</a>\n\n          <a\n            aria-current=\"page\"\n            className=\"navbar-item has-background-grey-lighter\"\n            href=\"#/people\"\n          >\n            People\n          </a> */}\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/people\" element={<PeoplePage />} />\n            <Route path=\"/people/:slug\" element={<PeoplePage />} />\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n\n        </div>\n      </main>\n    </>\n  );\n};\n","import { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\" />\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { AppProvider } from './providers/AppProvider';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <AppProvider>\n      <Router>\n        <App />\n      </Router>\n    </AppProvider>,\n  );\n"],"sourceRoot":""}